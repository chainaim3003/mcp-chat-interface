"use strict";exports.id=927,exports.ids=[927],exports.modules={9927:(e,t,r)=>{let i,s;r.d(t,{tB:()=>callMCPTool,sw:()=>getMCPServers,dV:()=>getMCPStatus,$h:()=>initializeMCP,hT:()=>f});var o=r(3292),n=r.n(o),a=r(7147),l=r(1017),c=r.n(l),h=r(2361),g=r(5142),u=r.n(g);let MCPConfigManager=class MCPConfigManager extends h.EventEmitter{constructor(e="./claude_mcp_config.json",t="./.env.local"){super(),this.config=null,this.watcher=null,this.reloadTimeout=null,this.initialized=!1,this.configPath=c().resolve(e),this.envPath=c().resolve(t)}async initialize(){if(this.initialized&&this.config)return this.config;try{if(await this.loadEnvironment(),await this.loadConfig(),this.setupFileWatcher(),this.initialized=!0,this.emit("initialized",this.config),console.log("✅ MCP Config Manager initialized"),!this.config)throw Error("Config initialization failed");return this.config}catch(e){throw console.error("❌ Failed to initialize MCP Config Manager:",e),this.emit("error",e),e}}async loadEnvironment(){try{await this.fileExists(this.envPath)&&(u().config({path:this.envPath}),console.log(`📁 Loaded environment from ${c().basename(this.envPath)}`))}catch(e){console.warn(`⚠️ Could not load environment file: ${e}`)}}async loadConfig(){try{let e;if(!await this.fileExists(this.configPath))throw Error(`Config file not found: ${this.configPath}`);let t=await n().readFile(this.configPath,"utf-8");try{e=JSON.parse(t)}catch(e){throw Error(`Invalid JSON in config file: ${e}`)}if(!e.mcpServers||"object"!=typeof e.mcpServers)throw Error("Config must contain mcpServers object");if(this.config=this.substituteEnvVars(e),!this.config||!this.config.mcpServers)throw Error("Configuration is null or missing mcpServers");let r=Object.keys(this.config.mcpServers).length,i=Object.values(this.config.mcpServers).filter(e=>!e.disabled).length;console.log(`📊 Loaded ${r} MCP servers (${i} enabled)`)}catch(e){throw Error(`Failed to load config from ${this.configPath}: ${e}`)}}substituteEnvVars(e){if("string"==typeof e)return e.replace(/\$\{([^}]+)\}/g,(e,t)=>{let r=process.env[t];return void 0===r?(console.warn(`⚠️ Environment variable ${t} not found`),e):r});if(Array.isArray(e))return e.map(e=>this.substituteEnvVars(e));if(e&&"object"==typeof e){let t={};for(let[r,i]of Object.entries(e))t[r]=this.substituteEnvVars(i);return t}return e}setupFileWatcher(){if(process.env.ENABLE_HOT_RELOAD&&"true"===process.env.ENABLE_HOT_RELOAD)try{let e=[this.configPath,this.envPath];e.forEach(e=>{this.fileExists(e).then(t=>{if(t)try{(0,a.watch)(e,e=>{"change"===e&&this.scheduleReload()}),console.log(`👀 Watching ${c().basename(e)} for changes`)}catch(t){console.warn(`⚠️ Could not watch ${e}:`,t)}})})}catch(e){console.warn("⚠️ Could not set up file watcher:",e)}}scheduleReload(){this.reloadTimeout&&clearTimeout(this.reloadTimeout),this.reloadTimeout=setTimeout(async()=>{try{console.log("\uD83D\uDD04 Configuration file changed, reloading...");let e=this.config;await this.loadEnvironment(),await this.loadConfig(),this.emit("configChanged",{oldConfig:e,newConfig:this.config}),console.log("✅ Configuration reloaded successfully")}catch(e){console.error("❌ Failed to reload configuration:",e),this.emit("reloadError",e)}},1e3)}async fileExists(e){try{return await n().access(e),!0}catch{return!1}}getConfig(){return this.config}getMCPServers(){return this.config?.mcpServers||{}}getEnabledServers(){return this.config?.mcpServers?Object.entries(this.config.mcpServers).filter(([e,t])=>!t.disabled).reduce((e,[t,r])=>(e[t]=r,e),{}):{}}getServerConfig(e){return this.config?.mcpServers?.[e]||null}isServerEnabled(e){let t=this.getServerConfig(e);return!!t&&!t.disabled}async updateServerConfig(e,t){if(!this.config?.mcpServers)throw Error("Config not loaded or mcpServers is null");this.config.mcpServers[e]={...this.config.mcpServers[e],...t},await this.saveConfig()}async saveConfig(){if(!this.config)throw Error("Cannot save null config");await n().writeFile(this.configPath,JSON.stringify(this.config,null,2),"utf-8"),console.log("\uD83D\uDCBE Configuration saved")}destroy(){this.watcher&&this.watcher.close(),this.reloadTimeout&&clearTimeout(this.reloadTimeout),this.removeAllListeners(),this.initialized=!1}};let f=new MCPConfigManager;var d=r(2081);async function loadMCPSDK(){try{let e=await Promise.resolve().then(r.bind(r,4195)),t=await Promise.resolve().then(r.bind(r,1646));return i=e.Client,s=t.StdioClientTransport,!0}catch(e){return console.warn("⚠️ MCP SDK not available, running in compatibility mode"),!1}}let MCPServerManager=class MCPServerManager extends h.EventEmitter{constructor(e){super(),this.servers=new Map,this.sdkAvailable=!1,this.shutdownInProgress=!1,this.configManager=e,this.configManager.on("configChanged",this.handleConfigChange.bind(this))}async initialize(){console.log("\uD83D\uDE80 Starting MCP Server Manager..."),this.sdkAvailable=await loadMCPSDK(),this.sdkAvailable||console.log("\uD83D\uDCDD Running in process-only mode (MCP SDK features disabled)");let e=this.configManager.getEnabledServers();for(let[t,r]of Object.entries(e))await this.startServer(t,r);console.log(`✅ MCP Server Manager initialized with ${this.servers.size} servers`)}async startServer(e,t){console.log(`🔄 Starting MCP server: ${e}`);let r={name:e,config:t,status:"starting",startTime:new Date};this.servers.set(e,r);try{await this.startProcess(r),this.sdkAvailable&&r.process&&await this.setupMCPClient(r),r.status="running",console.log(`✅ Server ${e} started (PID: ${r.pid})`),this.emit("serverStarted",e,r)}catch(t){r.status="error",r.error=t instanceof Error?t.message:String(t),console.error(`❌ Failed to start server ${e}:`,t),this.emit("serverError",e,t)}}async startProcess(e){let{config:t}=e,r={...process.env,...t.env||{}},i=(0,d.spawn)(t.command,t.args||[],{env:r,stdio:this.sdkAvailable?["pipe","pipe","pipe"]:"inherit"});if(e.process=i,e.pid=i.pid,i.on("error",t=>{console.error(`❌ Process error for ${e.name}:`,t),e.status="error",e.error=t.message,this.emit("serverError",e.name,t)}),i.on("exit",(t,r)=>{console.log(`🔚 Server ${e.name} exited (code: ${t}, signal: ${r})`),"running"===e.status&&(e.status="stopped"),this.shouldAutoRestart(e,t)&&!this.shutdownInProgress&&(console.log(`🔄 Auto-restarting server ${e.name} in 2 seconds...`),setTimeout(()=>{this.shutdownInProgress||this.restartServer(e.name)},2e3)),this.emit("serverStopped",e.name,t,r)}),await new Promise(e=>setTimeout(e,500)),null!==i.exitCode)throw Error(`Process exited immediately with code ${i.exitCode}`)}async setupMCPClient(e){if(e.process&&i&&s)try{let t=new s({reader:e.process.stdout,writer:e.process.stdin}),r=new i({name:`mcp-chat-interface-${e.name}`,version:"1.0.0"},{capabilities:{tools:{},resources:{}}});await r.connect(t),e.client=r,e.transport=t,await this.loadServerCapabilities(e),console.log(`🔗 MCP client connected to ${e.name}`)}catch(t){console.warn(`⚠️ Could not set up MCP client for ${e.name}:`,t)}}async loadServerCapabilities(e){if(e.client)try{let t=await e.client.listTools();e.tools=t.tools?.map(e=>e.name)||[],console.log(`📋 Server ${e.name} provides ${e.tools?.length||0} tools:`,e.tools?.join(", "))}catch(t){console.warn(`⚠️ Could not load capabilities for ${e.name}:`,t)}}shouldAutoRestart(e,t){return!e.config.disabled&&0!==t&&"true"===process.env.ENABLE_AUTO_RESTART}async handleConfigChange({oldConfig:e,newConfig:t}){console.log("\uD83D\uDD04 MCP configuration changed, updating servers...");let r=e?.mcpServers||{},i=t?.mcpServers||{};for(let e of Object.keys(r))i[e]||(console.log(`🗑️ Removing server: ${e}`),await this.stopServer(e));for(let[e,t]of Object.entries(i)){let i=r[e];if(t.disabled){this.servers.has(e)&&(console.log(`⏸️ Disabling server: ${e}`),await this.stopServer(e));continue}let s=!i||JSON.stringify(i)!==JSON.stringify(t);s&&(this.servers.has(e)?(console.log(`🔄 Restarting server due to config change: ${e}`),await this.restartServer(e)):(console.log(`➕ Starting new server: ${e}`),await this.startServer(e,t)))}}async stopServer(e){let t=this.servers.get(e);if(t){console.log(`🛑 Stopping server: ${e}`);try{if(t.client)try{await t.client.close()}catch(t){console.warn(`⚠️ Error closing MCP client for ${e}:`,t)}t.process&&!t.process.killed&&(t.process.kill("SIGTERM"),setTimeout(()=>{t.process&&!t.process.killed&&(console.log(`🔪 Force killing server ${e}`),t.process.kill("SIGKILL"))},5e3)),t.status="stopped",this.emit("serverStopped",e)}catch(t){console.error(`❌ Error stopping server ${e}:`,t)}}}async restartServer(e){let t=this.configManager.getServerConfig(e);if(!t)throw Error(`Server ${e} not found in configuration`);await this.stopServer(e),await new Promise(e=>setTimeout(e,1e3)),await this.startServer(e,t)}getServer(e){return this.servers.get(e)}getAllServers(){return Array.from(this.servers.values())}getRunningServers(){return this.getAllServers().filter(e=>"running"===e.status)}async callTool(e,t,r){let i=this.servers.get(e);if(!i)throw Error(`Server ${e} not found`);if("running"!==i.status)throw Error(`Server ${e} is not running (status: ${i.status})`);if(!i.client)throw Error(`Server ${e} does not have MCP client (SDK not available)`);try{let e=await i.client.callTool({name:t,arguments:r});return e}catch(r){throw console.error(`❌ Error calling tool ${t} on ${e}:`,r),r}}getServerStatus(){let e={};for(let[t,r]of this.servers)e[t]={status:r.status,pid:r.pid,uptime:r.startTime?Date.now()-r.startTime.getTime():0,tools:r.tools||[],error:r.error};return e}async shutdown(){console.log("\uD83D\uDED1 Shutting down MCP Server Manager..."),this.shutdownInProgress=!0;let e=Array.from(this.servers.keys()).map(e=>this.stopServer(e));await Promise.all(e),this.servers.clear(),this.removeAllListeners(),console.log("✅ MCP Server Manager shut down")}};let v=null,m=!1;async function initializeMCP(){if(!m)try{console.log("\uD83D\uDD04 Initializing MCP system..."),await f.initialize(),v=new MCPServerManager(f),await v.initialize(),m=!0,console.log("✅ MCP system ready")}catch(e){throw console.error("❌ Failed to initialize MCP system:",e),e}}function getMCPStatus(){return m&&v?{initialized:!0,servers:v.getServerStatus(),config:f.getConfig()}:{initialized:!1,servers:{},error:"MCP system not initialized"}}async function callMCPTool(e,t,r={}){if(!m||!v)throw Error("MCP system not initialized. Call initializeMCP() first.");try{return await v.callTool(e,t,r)}catch(r){throw console.error(`Failed to call ${e}.${t}:`,r),r}}function getMCPServers(){return m?f.getEnabledServers():{}}}};