"use strict";(()=>{var e={};e.id=93,e.ids=[93],e.modules={5142:e=>{e.exports=require("dotenv")},1287:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},4195:e=>{e.exports=import("@modelcontextprotocol/sdk/client/index.js")},1646:e=>{e.exports=import("@modelcontextprotocol/sdk/client/stdio.js")},2081:e=>{e.exports=require("child_process")},2361:e=>{e.exports=require("events")},7147:e=>{e.exports=require("fs")},3292:e=>{e.exports=require("fs/promises")},1017:e=>{e.exports=require("path")},6053:(e,r,t)=>{t.r(r),t.d(r,{config:()=>l,default:()=>u,routeModule:()=>d});var s={};t.r(s),t.d(s,{default:()=>handler});var o=t(1802),n=t(7153),a=t(6249),i=t(9927);async function handler(e,r){if("POST"!==e.method)return r.status(405).json({error:"Method not allowed"});try{let{serverName:t,toolName:s,args:o={}}=e.body;if(!t||!s)return r.status(400).json({error:"serverName and toolName are required"});console.log(`🔧 Testing ${t}.${s} with args:`,o),await (0,i.$h)();let n=(0,i.dV)(),a=n.servers?.[t];if(!a)return r.status(404).json({error:`Server ${t} not found`,availableServers:Object.keys(n.servers||{})});if("running"!==a.status)return r.status(400).json({error:`Server ${t} is not running (status: ${a.status})`,serverInfo:a});let u=a.tools||[];if(!u.includes(s))return r.status(400).json({error:`Tool ${s} not available on server ${t}`,availableTools:u});let l=Date.now(),d=await (0,i.tB)(t,s,o),c=Date.now()-l;r.status(200).json({success:!0,result:d,executionTime:c,serverInfo:{name:t,status:a.status,tools:u}})}catch(e){console.error("❌ Tool test error:",e),r.status(500).json({success:!1,error:e instanceof Error?e.message:"Unknown error"})}}let u=(0,a.l)(s,"default"),l=(0,a.l)(s,"config"),d=new o.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/debug/test-server",pathname:"/api/debug/test-server",bundlePath:"",filename:""},userland:s})}};var r=require("../../../webpack-api-runtime.js");r.C(e);var __webpack_exec__=e=>r(r.s=e),t=r.X(0,[222,927],()=>__webpack_exec__(6053));module.exports=t})();